package Tic;


import java.awt.Color;
import java.awt.Dimension;
import javax.swing.JFrame;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import java.awt.Font;
import java.awt.Color;


public class Panel extends JPanel
{
    JPanel buttonPanel = new JPanel();
    JPanel boardPanel = new JPanel();

    JButton aI = new JButton("AI OFF");
    JButton buttons[] = new JButton[9];
    int turn = 0;   //determines whose turn it is

    public Panel()
    {
        boardPanel.setLayout(new GridLayout(3,3));
        add(boardPanel, "North");
        boardPanel.setPreferredSize(new Dimension(600, 600));
        add(buttonPanel, "South");
        buttonPanel.setPreferredSize(new Dimension(600, 50));
        createBoard();
    }

    public void createBoard()
    {
        Font large = new Font("Dialog", Font.PLAIN, 200);
        for(int i = 0; i <= 8; i++)
        {
            buttons[i] = new JButton();
            buttons[i].setText("");

            buttons[i].addActionListener(new buttonListener());

            boardPanel.add(buttons[i]); //adds this button to JPanel (note: no need for JPanel.add(...)
            buttons[i].setFont(large);
            //because this whole class is a JPanel already
        }
        aI.addActionListener(new buttonListener());
        buttonPanel.add(this.aI);


    }
    public void clearBoard()
    {

        for(int i = 0; i <= 8; i++)
        {
            buttons[i].setText("");
        }
    }

    // when a button is clicked, it generates an ActionEvent. Thus, each button needs an ActionListener. When it is clicked, it goes to this listener class that I have created and goes to the actionPerformed method. There (and in this class), we decide what we want to do.
    private class buttonListener implements ActionListener {

        public void actionPerformed(ActionEvent e) {

            JButton buttonPress = (JButton) e.getSource(); //get the particular button that was clicked
            if (turn % 2 == 0 && buttonPress.getText().equals("")) {
                buttonPress.setForeground(Color.BLUE);
                buttonPress.setText("O");
                turn++;
            }
            else if(turn % 2 == 1 && buttonPress.getText().equals("")) {
                buttonPress.setForeground(Color.RED);
                buttonPress.setText("X");
                turn++;
            }
           else if (buttonPress.getText().equals("AI OFF")){
                buttonPress.setText("AI ON");
            }
            else if (buttonPress.getText().equals("AI ON")){
                buttonPress.setText("AI OFF");
            }
            else
                JOptionPane.showMessageDialog(null, "Spot already taken. Pick another Spot");

            if (checkForWin() == true && turn % 2 == 0) {
                JOptionPane.showMessageDialog(null, "Game Over. Player 2 Wins");
                clearBoard();
                turn = 0;
            }
            else if (checkForWin() == true && turn % 2 == 1) {
                JOptionPane.showMessageDialog(null, "Game Over. Player 1 Wins");
                clearBoard();
                turn = 0;
            }
            else if (turn == 9){
                JOptionPane.showMessageDialog(null, "Game Over. Tie");
                clearBoard();
                turn = 0;
            }




        }

    }


        public boolean checkForWin()
        {
            /**   Reference: the button array is arranged like this as the board
             *      0 | 1 | 2
             *      3 | 4 | 5
             *      6 | 7 | 8
             */
            //check for a horizontal win check
            for(int i = 0; i <= 6; i+=3) {
                if( match(i,i+1) && match(i+1,i+2) )
                    return true;
            }

            //check for a vertical win check
            for(int i = 0; i <= 2; i++) {
            if( match(i,i+3) && match(i+3,i+6) )
                return true;
        }

            //check for a diagonal win check
            for(int i = 0; i <= 1; i++) {
                if( match(i*2,4) && match(4, 8-i*2) )
                    return true;
            }

                return false;
        }

        public boolean match(int x, int y)
        {

            if (isPlayedOn(x)) {
                if (buttons[x].getText() == (buttons[y].getText()))
                    return true;
                else
                    return false;
            }
            else
                return false;
        }
        public boolean isPlayedOn(int x)
        {
            if (buttons[x].getText().equals("X") || buttons[x].getText().equals("O"))
                return true;
            else
                return false;
        }



    public static void main(String[] args)
    {
        JFrame window = new JFrame("Tic-Tac-Toe");
        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        window.getContentPane().add(new Panel());
        window.setBounds(800,800,600,700);
        window.setVisible(true);
    }
}

